apiVersion: v1
kind: ConfigMap
metadata:
  name: pipeline-committee-package-ops-envfrom
data:
  INITIAL_SYNC_SCRIPT: |
    mkdir -p /pipelines/data/committees/meeting_protocols_text &&\
    mkdir -p /pipelines/data/committees/meeting_protocols_parts &&\
    mkdir -p /pipelines/data/people/committees/joined-meetings &&\
    mkdir -p /pipelines/data/committees/all &&\
    mkdir -p /pipelines/data/members/all &&\
    gsutil -m rsync -x files -r gs://knesset-data-pipelines/data/committees/meeting_protocols_text/ \
                       /pipelines/data/committees/meeting_protocols_text/ &&\
    gsutil -m rsync -x files -r gs://knesset-data-pipelines/data/committees/meeting_protocols_parts/ \
                       /pipelines/data/committees/meeting_protocols_parts/ &&\
    gsutil -m rsync -r gs://knesset-data-pipelines/data/people/committees/joined-meetings/ \
                       /pipelines/data/people/committees/joined-meetings/
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pipeline-committee-package-envfrom
data:
  PIPELINES_SCRIPT: |
    cd /pipelines &&\
    (
      RES=0;

      export DPP_DB_ENGINE=postgresql://publicdb:${PUBLICDB_POSTGRES_PASSWORD}@publicdb:5432/publicdb

      ! run_pipeline ./committees/gcs_list_files && RES=1;
      ! run_pipeline ./committees/join-meetings && RES=1;
      ! run_pipeline ./committees/meetings_datapackage_zip && RES=1;
      ! run_pipeline ./committees/all && RES=1;
      ! run_pipeline ./members/all && RES=1;

      rm -rf /pipelines/data/committees/meeting_protocols_text;
      rm -rf /pipelines/data/committees/meeting_protocols_parts;
      rm -rf /pipelines/data/committees/joined-meetings;
      exit $RES
    )
---
{{ dict "name" "pipeline-committee-package" "Values" .Values "enabled" .Values.committeesPackage.enabled "opsEnvFrom" true "allowPipelineOps" true | include "pipeline-job" }}
